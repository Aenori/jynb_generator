% Informatique - listes - project sample 
% Nicolas Rousset
% 7 mai 2020


# Exercice n 1

Ecrire une fonction *listeNombresPremiers* qui prend un argument n et renvoit une liste des n premiers nombres entiers

~~~ # Exercice placeholder
# Mettez votre code ici

# Ne pas modifier les lignes ci-dessous
import @JUPYTER_UNITEST_NAME as jpnb_unit
jpnb_unit.testerListeNombresPremiers(listeNombresPremiers)
~~~

~~~ # Correction
def estPremier(n):
    for k in range(2, int(n**0.5 + 1)):
        if n % k == 0:
            return False
        
    return True

def listeNombresPremiers(n):
    res = []
    for it in range(2, (n+3)**2):
        if estPremier(it):
            res.append(it)
            if len(res) == n:
                return res

import @JUPYTER_UNITEST_NAME as jpnb_unit
jpnb_unit.testerListeNombresPremiers(listeNombresPremiers)
~~~

~~~ # Test unitaire
class TesterListeNombresPremiers(unittest.TestCase):
    def testSimples(self):
        self.assertEquals([2], listeNombresPremiers(1))
        self.assertEquals([2, 3], listeNombresPremiers(2))
        self.assertEquals([2, 3, 5, 7], listeNombresPremiers(4))
        self.assertEquals([2, 3, 5, 7, 11, 13], listeNombresPremiers(6))

def testerListeNombresPremiers(listeNombresPremiers):
    setattr(this_module, 'listeNombresPremiers', listeNombresPremiers)
    suite = unittest.TestLoader().loadTestsFromTestCase(TesterListeNombresPremiers)
    unittest.TextTestRunner(verbosity=2).run(suite)
~~~

# Exercice n 2

Corriger le code suivant, qui prend en argument un entier n et devrait renvoyer la liste des n premiers entiers (à partir de 1) au carré.

~~~ # Exercice placeholder
# Modifiez le code ci-dessous
def squareList(n):
    res = []
    for it in range(n):
        res.append(n**2)
        return res

# Ne pas modifier les lignes ci-dessous
import @JUPYTER_UNITEST_NAME as jpnb_unit
jpnb_unit.testerSquareList(squareList)
~~~

~~~ # Correction
def squareList(n):
    res = []
    for it in range(1, n+1):
        res.append(it**2)
    return res

import @JUPYTER_UNITEST_NAME as jpnb_unit
jpnb_unit.testerSquareList(squareList)
~~~

~~~ # Test unitaire
def testerSquareList(squareList):
    tu_utils.checkResult([1], squareList, [1])
    tu_utils.checkResult([1, 4], squareList, [2])
    tu_utils.checkResult([1, 4, 9, 16], squareList, [4])
    tu_utils.checkResultSilent([1, 4, 9, 16, 25, 36], squareList, [6])
~~~
